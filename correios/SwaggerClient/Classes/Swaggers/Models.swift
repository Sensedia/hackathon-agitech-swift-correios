// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [CalculoPrecoFrete]
        Decoders.addDecoder(clazz: [CalculoPrecoFrete].self) { (source: AnyObject) -> [CalculoPrecoFrete] in
            return Decoders.decode(clazz: [CalculoPrecoFrete].self, source: source)
        }
        // Decoder for CalculoPrecoFrete
        Decoders.addDecoder(clazz: CalculoPrecoFrete.self) { (source: AnyObject) -> CalculoPrecoFrete in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = CalculoPrecoFrete()
            instance.codigo = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["codigo"] as AnyObject?)
            instance.httpStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["httpStatus"] as AnyObject?)
            instance.valor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valor"] as AnyObject?)
            instance.adicionalMaoPropria = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adicionalMaoPropria"] as AnyObject?)
            instance.adicionalAvisoRecebimento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adicionalAvisoRecebimento"] as AnyObject?)
            instance.adicionalValorDeclarado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["adicionalValorDeclarado"] as AnyObject?)
            instance.valorSemAdicionais = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["valorSemAdicionais"] as AnyObject?)
            instance.resultado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultado"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            instance.detalhes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["detalhes"] as AnyObject?)
            return instance
        }


        // Decoder for [DetalhesEventos]
        Decoders.addDecoder(clazz: [DetalhesEventos].self) { (source: AnyObject) -> [DetalhesEventos] in
            return Decoders.decode(clazz: [DetalhesEventos].self, source: source)
        }
        // Decoder for DetalhesEventos
        Decoders.addDecoder(clazz: DetalhesEventos.self) { (source: AnyObject) -> DetalhesEventos in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = DetalhesEventos()
            instance.tipoEvento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipoEvento"] as AnyObject?)
            instance.statusEvento = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["statusEvento"] as AnyObject?)
            instance.descricaoEvento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["descricaoEvento"] as AnyObject?)
            return instance
        }


        // Decoder for [Endereco]
        Decoders.addDecoder(clazz: [Endereco].self) { (source: AnyObject) -> [Endereco] in
            return Decoders.decode(clazz: [Endereco].self, source: source)
        }
        // Decoder for Endereco
        Decoders.addDecoder(clazz: Endereco.self) { (source: AnyObject) -> Endereco in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = Endereco()
            instance.logradouro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logradouro"] as AnyObject?)
            instance.bairro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["bairro"] as AnyObject?)
            instance.municipio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["municipio"] as AnyObject?)
            instance.uf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uf"] as AnyObject?)
            return instance
        }


        // Decoder for [Erro]
        Decoders.addDecoder(clazz: [Erro].self) { (source: AnyObject) -> [Erro] in
            return Decoders.decode(clazz: [Erro].self, source: source)
        }
        // Decoder for Erro
        Decoders.addDecoder(clazz: Erro.self) { (source: AnyObject) -> Erro in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = Erro()
            instance.resultado = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resultado"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            instance.detalhes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["detalhes"] as AnyObject?)
            return instance
        }


        // Decoder for [Eventos]
        Decoders.addDecoder(clazz: [Eventos].self) { (source: AnyObject) -> [Eventos] in
            return Decoders.decode(clazz: [Eventos].self, source: source)
        }
        // Decoder for Eventos
        Decoders.addDecoder(clazz: Eventos.self) { (source: AnyObject) -> Eventos in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = Eventos()
            instance.codigoObjeto = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoObjeto"] as AnyObject?)
            instance.tipoEvento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tipoEvento"] as AnyObject?)
            instance.statusEvento = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["statusEvento"] as AnyObject?)
            instance.descricaoEvento = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["descricaoEvento"] as AnyObject?)
            instance.nomeUnidade = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nomeUnidade"] as AnyObject?)
            instance.codigoSRO = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoSRO"] as AnyObject?)
            instance.municipio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["municipio"] as AnyObject?)
            instance.uf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uf"] as AnyObject?)
            instance.codigoMCU = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoMCU"] as AnyObject?)
            instance.codigoDR = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["codigoDR"] as AnyObject?)
            instance.siglaDR = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siglaDR"] as AnyObject?)
            instance.numeroLista = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["numeroLista"] as AnyObject?)
            instance.estacao = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estacao"] as AnyObject?)
            instance.usuario = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usuario"] as AnyObject?)
            instance.dataGravacao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataGravacao"] as AnyObject?)
            instance.entregador = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entregador"] as AnyObject?)
            instance.dataCriacao = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dataCriacao"] as AnyObject?)
            instance.acaoBloqueio = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["acaoBloqueio"] as AnyObject?)
            return instance
        }


        // Decoder for [FaixaCEP]
        Decoders.addDecoder(clazz: [FaixaCEP].self) { (source: AnyObject) -> [FaixaCEP] in
            return Decoders.decode(clazz: [FaixaCEP].self, source: source)
        }
        // Decoder for FaixaCEP
        Decoders.addDecoder(clazz: FaixaCEP.self) { (source: AnyObject) -> FaixaCEP in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = FaixaCEP()
            instance.nome = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nome"] as AnyObject?)
            instance.inicio = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inicio"] as AnyObject?)
            instance.fim = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fim"] as AnyObject?)
            return instance
        }


        // Decoder for [ObjetoPostal]
        Decoders.addDecoder(clazz: [ObjetoPostal].self) { (source: AnyObject) -> [ObjetoPostal] in
            return Decoders.decode(clazz: [ObjetoPostal].self, source: source)
        }
        // Decoder for ObjetoPostal
        Decoders.addDecoder(clazz: ObjetoPostal.self) { (source: AnyObject) -> ObjetoPostal in
            let sourceDictionary = source as! [AnyHashable: Any]
            let instance = ObjetoPostal()
            instance.numero = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["numero"] as AnyObject?)
            instance.eventos = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["eventos"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
